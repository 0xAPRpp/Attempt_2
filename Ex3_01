# include <iostream>
# include <iomanip>

int main()
{
	unsigned int red{ 0xFF0000 };
	unsigned int white{ 0xFFFFFF };

	std::cout << std::hex << std::setfill('0');

	//complement - inverses all the bits including the empty bits that are 0s
	std::cout << ~red << std::endl; 
	std::cout << ~white << std::endl;

	//AND/OR - only works on the value ignoring the empty 0 bits
	std::cout << std::setw(8) << (red & white) << std::endl;
	std::cout << std::setw(8) << (red | white) << std::endl;

	//XOR
	unsigned int mask{red ^ white};
	std::cout << std::setw(8) << mask << std::endl;
	std::cout << std::setw(8) << (mask ^ red) << std::endl;
	std::cout << std::setw(8) << (mask ^ white) << std::endl;

	unsigned flag(0x000000FF);

	//Select bit 1 from flag
	std::cout << std::setw(8) << (flag & 0b1) << std::endl;
	//Select bit 6 from flag
	std::cout << std::setw(8) << (flag & 0b100000) << std::endl;
	//Switch off bit 6 from flag
	std::cout << std::setw(8) << (flag&(~0b100000)) << std::endl;
	//Switch On bit 20 from flag
	std::cout << std::setw(8) << ((flag & (~0b100000)) | (0b1 << 19)) << std::endl;

	system("pause");
}
