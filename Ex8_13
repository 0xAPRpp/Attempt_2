# include <iostream>
# include <iomanip>
# include <array>
# include <string>
# include <string_view>
# include <vector>
# include <cctype>
# include <memory>

using namespace std;
const double* find_min(const double* arr_doubles, const int size);
double* add_min(double* arr_doubles, const int size, const double* ptr_min);
const double* find_max(const double* arr_doubles, const int size);
double* normalize(double* arr_doubles, const int size, const double denominator);

int main(int argc, char* argv[])
{	
	std::unique_ptr<double[]> u_ptr_fp_values{ std::make_unique<double[]>(std::stoi(argv[1])) };
	for (size_t i{}, j{2}; i < std::stoi(argv[1]); i++,j++)
	{
		u_ptr_fp_values[i] = std::stod(argv[j]);
	}

	for (size_t i{}; i < std::stoi(argv[1]); i++)
	{
		cout << u_ptr_fp_values[i] << endl;
	}
		
	cout << "Smallest Value is: " << *find_min(u_ptr_fp_values.get(), std::stoi(argv[1]));
	cout << endl;
		
	add_min(u_ptr_fp_values.get(), std::stoi(argv[1]), find_min(u_ptr_fp_values.get(), std::stoi(argv[1])));

	cout << "Largest Value is: " << *find_max(u_ptr_fp_values.get(), std::stoi(argv[1]));
	cout << endl;

	for (size_t i{}; i < std::stoi(argv[1]); i++)
	{
		cout << u_ptr_fp_values[i] << endl;
	}

	normalize(u_ptr_fp_values.get(), std::stoi(argv[1]), *find_max(u_ptr_fp_values.get(), std::stoi(argv[1])));

	for (size_t i{}; i < std::stoi(argv[1]); i++)
	{
		cout << u_ptr_fp_values[i] << endl;
	}
	
	system("pause");
}

const double* find_min(const double* arr_doubles, const int size)
{
	size_t min{};
	for (size_t i{}; i < size; i++)
	{
		if (arr_doubles[i] < arr_doubles[min])
			min = i;		
	}
	return &arr_doubles[min];
}

double* add_min(double* arr_doubles, const int size, const double* ptr_min )
{
	double min{ *ptr_min };
	for (size_t i{}; i < size; i++)
	{
		arr_doubles[i] -= min;
	}
	return arr_doubles;
}

const double* find_max(const double* arr_doubles, const int size)
{
	size_t max{};
	for (size_t i{}; i < size; i++)
	{
		if (arr_doubles[i] > arr_doubles[max])
			max = i;
	}
	return &arr_doubles[max];
}

double* normalize(double* arr_doubles, const int size, const double denominator)
{
	if (denominator == 0)
		return arr_doubles;

	for (size_t i{}; i < size; i++)
	{
		arr_doubles[i] /= denominator;
	}
	return arr_doubles;

}
