/*Exercise 7-3. Write a program that reads a text string of arbitrary length from the
keyboard and prompts for entry of a word that is to be found in the string. The
program should find and replace all occurrences of this word, regardless of case,
by as many asterisks as there are characters in the word. It should then output
the new string. Only whole words are to be replaced. For example, if the string is
"Our house is at your disposal." and the word that is to be found is "our", then
the resultant string should be as follows: "*** house is at your disposal." and not
"*** house is at y*** disposal.".*/


# include <iostream>
# include <string>
# include <vector>

using namespace std;

int main()
{
	std::string text{};
	std::string word{};

	std::getline(cin, text, '#');
	cin >> word;

	const std::string separators{ " ,;:.\"!?'\n" };
	size_t start{ text.find_first_not_of(separators) }, end{};

	while (start != std::string::npos)
	{
		end = text.find_first_of(separators, start + 1);
		if (end == std::string::npos)
			end = text.length();

		cout << start << " " << end << endl;

		bool matched{true};
		for (size_t i{}; i < word.length(); i++)
		{
			cout << word << " " << text.substr(start, end - start) << endl;
			if (word.length() != text.substr(start, end - start).length())
			{
				matched = false;
				break;
			}
			else
				if (tolower(word[i]) != tolower(text.substr(start, end - start)[i]))
				{
					matched = false;
					break;
				}
		}
		cout <<std::boolalpha<< matched << endl;
		if (matched == true)
		{
			cout << start << " " << end << endl;
			for (size_t j{start}; j < end; j++)
			{
				cout << text[j] << " ";
				text.replace(j,1,"*");
			}
		}

		start = text.find_first_not_of(separators, end+1);
	}

	cout << text << endl;

	system("pause");
}
